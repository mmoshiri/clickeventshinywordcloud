ui<-pageWithSidebar(
#Title
headerPanel = ("Word Cloud Abstracts"),
sidebarPanel(
#Text Input for Search Term
textInput("metabolite", label = h3("Enter Your Metabolite"), multiple = F, value = "enter metabolite..."),
br(),
actionButton("update", "Update Metabolite"),
hr(),
# Slider inputs for the number of articles retrieved
sliderInput("nAr", "Number of articles:", min = 1, max = 25, value = 10, step = 1),
br(),
),
mainPanel(
(wordcloud2Output(outputId, width = "100%", height = "400px"))
#Plot the wordcloud here
helpText("placeholder")
#plotOutput("plotwordcloud", "800px", "800px")
)
)
server<-function(input,output) {
}
shinyApp(ui=ui,server=server)
ui<-pageWithSidebar(
#Title
headerPanel = ("Word Cloud Abstracts"),
sidebarPanel(
#Text Input for Search Term
textInput("metabolite", label = h3("Enter Your Metabolite"), multiple = F, value = "enter metabolite..."),
br(),
actionButton("update", "Update Metabolite"),
hr(),
# Slider inputs for the number of articles retrieved
sliderInput("nAr", "Number of articles:", min = 1, max = 25, value = 10, step = 1),
br(),
),
mainPanel(
(wordcloud2Output(outputId, width = "100%", height = "400px"))
#Plot the wordcloud here
helpText("placeholder")
#plotOutput("plotwordcloud", "800px", "800px")
)
)
library(shiny)
library(RISmed)
library(dplyr)
library(tidytext)
library(dplyr)
library(stringr)
library(wordcloud2)
ui<-fluidPage(
titlePanel("Word Cloud Abstracts"),
sidebarLayout(
textInput("metabolite", label = h3("Enter Your Metabolite"), multiple = F, value = "enter metabolite..."),
br(),
actionButton("updates", "Go"),
hr(),
#fluidRow(column(3, verbatimTextOutput("value"))),
),
mainPanel(
wordcloud2Output(outputId = "cloud")
)
)
library(shiny)
library(RISmed)
library(dplyr)
library(tidytext)
library(dplyr)
library(stringr)
library(wordcloud2)
ui<-fluidPage(
titlePanel("Word Cloud Abstracts"),
sidebarLayout(
textInput("metabolite", label = h3("Enter Your Metabolite"), multiple = F, value = "enter metabolite..."),
br(),
actionButton("updates", "Go"),
hr(),
fluidRow(column(3, verbatimTextOutput("value"))),
),
mainPanel(
wordcloud2Output(outputId = "cloud")
)
)
library(shiny)
library(RISmed)
library(dplyr)
library(tidytext)
library(dplyr)
library(stringr)
library(wordcloud2)
ui<-fluidPage(
titlePanel("Word Cloud Abstracts"),
sidebarLayout(
textInput("metabolite", label = h3("Enter Your Metabolite"), multiple = F, value = "enter metabolite..."),
br(),
actionButton("updates", "Go"),
hr(),
),
mainPanel(
wordcloud2Output(outputId = "cloud")
)
)
server<-function(input,output) {output$cloud <- renderWordcloud2({
create_wordcloud(artofwar)
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
ui<-fluidPage(
titlePanel("Word Cloud Plot"),
sidebarLayout(
sidebarPanel(
textInput("Metabolite", label = h3("Enter Your Metabolite"), value = "enter metabolite..."),
br(),
actionButton("Updates", "Update"),
hr(),
dateRangeInput('dateRange',label = 'Date range input: yyyy-mm-dd',start = Sys.Date() - 2, end = Sys.Date() + 2),
sliderInput("AbsFreq", "AbsFrequency:", min = 1,  max = 4000, value = 1000)
),
mainPanel(
verbatimTextOutput("dateRange"),
wordcloud2Output(outputId = "cloud")
)
)
)
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
searchTerms = c("aspirin")
SUMMARYx <- EUtilsSummary(paste0(searchTerms, collapse="+"),type = "esearch", db = "pubmed",
datetype = "edat",retmax = 2000, mindate = 2000,maxdate = 2019)
Idsx <- QueryId(SUMMARYx)
head(filteredWords)
searchTerms = c("aspirin")
SUMMARYx <- EUtilsSummary(paste0(searchTerms, collapse="+"),type = "esearch", db = "pubmed",
datetype = "edat",retmax = 2000, mindate = 2000,maxdate = 2019)
Idsx <- QueryId(SUMMARYx)
MyDownloadsx <- EUtilsGet(SUMMARYx, type = "efetch", db = "pubmed")
abstractsx <- data.frame(title = MyDownloadsx@ArticleTitle,
abstract = MyDownloadsx@AbstractText,
journal = MyDownloadsx@Title,
DOI = MyDownloadsx@PMID,
year = MyDownloadsx@YearPubmed)
abstractsx <- abstractsx %>% mutate(abstract = as.character(abstract))
abstractsx$abstract <- as.character(abstractsx$abstract) # alternative for above line
#Without english stop words
#Split a column into tokens using the tokenizers package
CorpusofMyCloudx <- unique(abstractsx %>% unnest_tokens(word, abstract)) %>%
anti_join(stop_words) %>% count(word, sort = TRUE)
Wordx<-CorpusofMyCloudx$word
limittedvaluesx <- gsub("^\\d+$", "", Wordx)
filterWords <- unique(c(filterList$word, as.character(1:100), "p", searchTerms))
#CorpusofMyCloudx%>% anti_join(limittedvalues2)
filteredWords <- CorpusofMyCloudx[!(CorpusofMyCloudx$word %in% filterWords),]
finalOutput <- wordcloud2(filteredWords, color = "random-light", minSize= "15" , backgroundColor = "gray")
shinyApp(ui = ui, server = server)
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
is.data.frame(filterList)
write.csv
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/yees.R')
getwd()
library(name_UI <- function(id) {
ns <- NS(id)
tagList(
)
}
name <- function(input, output, session) {
})
library(shiny)
library(DT)
install.packages("DT")
install.packages("DT")
library()
artofwar
50*14000
4*14
library(shiny)
result <- reactive({
temp <- input$X + input$Y
isolate({
temp <- temp * input$Y * input$Z
})
temp
})
x=2
7=3
y=3
temp
cl
rm(list=ls())
ui <- shinyUI(fluidPage(
titlePanel("test"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "cyl",
label = "Select Cylinders",
choices = unique(cars$cyl)),
selectInput(inputId = "mpg",
label = "Select MPG",
choices = "NULL")),
mainPanel(
dataTableOutput("data")
)
)
))
ui <- shinyUI(fluidPage(
titlePanel("test"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "cyl",
label = "Select Cylinders",
choices = unique(cars$cyl)),
selectInput(inputId = "mpg",
label = "Select MPG",
choices = "NULL")),
mainPanel(
dataTableOutput("data")
)
)
))
server <- function(session, input, output){
op1 <- reactive({
cars %>% filter(cyl==input$cyl)
})
observe({
x <- op1() %>% select(mpg) %>% distinct()
updateSelectInput(session, "mpg", "Select MPG", choices = x)
})
output$data <- renderDataTable({
op1()
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("test"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "cyl",
label = "Select Cylinders",
choices = unique(cars$cyl)),
selectInput(inputId = "mpg",
label = "Select MPG",
choices = "NULL")),
mainPanel(
dataTableOutput("data")
)
)
))
server <- function(session, input, output){
op1 <- reactive({
cars %>% filter(cyl==input$cyl)
})
observe({
x <- op1() %>% select(mpg) %>% distinct()
updateSelectInput(session, "mpg", "Select MPG", choices = x)
})
output$data <- renderDataTable({
op1()
})
}
shinyApp(ui = ui, server = server)
gbl <- list(constants = list(ppm = 2, # TODO: re-add ppm as option for people importing their data through csv
ml.twoonly = c("adaboost","logicBag","bartMachine","binda",
"ada","gamboost","glmboost","chaid",
"C5.0Cost","rpartCost","deepboost",
"dwdPoly","dwdRadial","glm","glmnet",
"glmStepAIC","glmnet_h2o","svmLinearWeights2",
"dwdLinear","svmLinearWeights","logreg","mlpKerasDropoutCost",
"mlpKerasDecayCost","ORFlog","ORFpls","ORFridge","ORFsvm",
"plsRglm","rotationForest","rotationForestCp",
"svmRadialWeights","nodeHarvest")
shiny::runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny')
myvector<-c(8,3,9,7,1)
myvector
myvector[2]
myvecto[2,2]
myvector[1,2]
mylist <- list(name="Fred", wife="Mary", myvector)
mylist
mylist[[2]]
mylist[[3]]
mylist$wife
attributes(mylist)
attributes(mylist)
mynames <- c("Mary", "John", "Ann", "Sinead", "Joe", "Mary", "Jim", "John",
˓"Simon")
table(mynames)
mynames <- c("Mary", "John", "Ann", "Sinead", "Joe", "Mary", "Jim", "John",
˓"Simon")
mynames <- c("Mary", "John", "Ann", "Sinead", "Joe", "Mary", "Jim", "John","Simon")
table(mynames)
mytable <- table(mynames)
mytable
mytable[[4]]
log10
log10()
log10
help.search()
help.search(deviation)
help.search("deviation")
RSiteSearch("deviation")
install.packages("SeqinR")
install.packages("seqinr")
library(seqinr)
help("library")
help("sequinr")
getncbiseq<-function(accession)
rm(list=ls())
library(sequinr)
install.packages("sequinr")
setRepositories()
input = list(
filter = c("medical", "numbers", "stopwords", "metabolomics"),
searchTerms = "glucose",
dateRange = c(2000, 2020),
absFreq = 100,
topWords=200
)
setwd("C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/clickeventshinywordcloud")
#getwd()
library(rstudioapi)
#script_path = rstudioapi::getActiveDocumentContext()$path
#script_dir = dirname(script_path)
#setwd(script_dir)
library(shiny)
library(RISmed)
library(dplyr)
library(tidytext)
library(dplyr)
library(stringr)
library(wordcloud2)
library(data.table)
filterList <- data.table::fread("filterList.csv")
getAbstracts <- function(searchTerms, retmax=500, mindate=2000, maxdate=2019){
searchTerms = strsplit(searchTerms, " ")[[1]]
# ==== SEARCH A METABOLITE TERM =====
SUMMARYx <- EUtilsSummary(paste0(searchTerms, collapse="+"),type = "esearch", db = "pubmed",
datetype = "edat",retmax = 500,
mindate = 2000, maxdate = 2019)
Idsx <- QueryId(SUMMARYx)
# Get Download(Fetch)
MyDownloadsx <- EUtilsGet(SUMMARYx, type = "efetch", db = "pubmed")
#Make Data.frame of MyDownloads
abstractsx <- data.frame(title = MyDownloadsx@ArticleTitle,
abstract = MyDownloadsx@AbstractText,
journal = MyDownloadsx@Title,
DOI = MyDownloadsx@PMID,
year = MyDownloadsx@YearPubmed)
#Constract a charaterized variable for abstract of abstracts data.frame
abstractsx <- abstractsx %>% mutate(abstract = as.character(abstract))
#abstractsx$abstract <- as.character(abstractsx$abstract) # alternative for above line
return(abstractsx)
}
#wordfrequency of whole abstract #frequencies = getWordFrequency(abstracts)#it should be # from here
getWordFrequency <- function(abstractsx){
#Split a column into tokens using the tokenizers package
CorpusofMyCloudx <- unique(abstractsx %>%
unnest_tokens(word, abstract)) %>% count(word, sort = TRUE)
CorpusofMyCloudx$word <- gsub("^\\d+$", "", CorpusofMyCloudx$word)
return(CorpusofMyCloudx)
}
getFilteredWordFreqency <- function(frequencies, filterList){
filterWords <- unique(filterList$word)
filteredWords <- frequencies[!(frequencies$word %in% filterWords),]
return(filteredWords)
}
filter_storage <- list(
medical = filterList,
stopwords = tidytext::stop_words,
metabolomics = data.table::data.table(word=c("metabolism", "metabolic",
"metabolomic", "metabolomics",
"biochemical", "mass", "spectrometry",
"nmr", "direct", "infusion"))
)
head(abstractsx)
filterList <- data.table::fread("filterList.csv")
getAbstracts <- function(searchTerms, retmax=500, mindate=2000, maxdate=2019){
searchTerms = strsplit(searchTerms, " ")[[1]]
# ==== SEARCH A METABOLITE TERM =====
SUMMARYx <- EUtilsSummary(paste0(searchTerms, collapse="+"),type = "esearch", db = "pubmed",
datetype = "edat",retmax = 500,
mindate = 2000, maxdate = 2019)
Idsx <- QueryId(SUMMARYx)
# Get Download(Fetch)
MyDownloadsx <- EUtilsGet(SUMMARYx, type = "efetch", db = "pubmed")
#Make Data.frame of MyDownloads
abstractsx <- data.frame(title = MyDownloadsx@ArticleTitle,
abstract = MyDownloadsx@AbstractText,
journal = MyDownloadsx@Title,
DOI = MyDownloadsx@PMID,
year = MyDownloadsx@YearPubmed)
#Constract a charaterized variable for abstract of abstracts data.frame
abstractsx <- abstractsx %>% mutate(abstract = as.character(abstract))
#abstractsx$abstract <- as.character(abstractsx$abstract) # alternative for above line
return(abstractsx)
}
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny')
head(abtractsx)
View(getAbstracts)
setwd("C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny/clickeventshinywordcloud")
#getwd()
library(rstudioapi)
#script_path = rstudioapi::getActiveDocumentContext()$path
#script_dir = dirname(script_path)
#setwd(script_dir)
library(shiny)
library(RISmed)
library(dplyr)
library(tidytext)
library(dplyr)
library(stringr)
library(wordcloud2)
library(data.table)
filterList <- data.table::fread("filterList.csv")
getAbstracts <- function(searchTerms, retmax=500, mindate=2000, maxdate=2019){
searchTerms = strsplit(searchTerms, " ")[[1]]
# ==== SEARCH A METABOLITE TERM =====
SUMMARYx <- EUtilsSummary(paste0(searchTerms, collapse="+"),type = "esearch", db = "pubmed",
datetype = "edat",retmax = 500,
mindate = 2000, maxdate = 2019)
Idsx <- QueryId(SUMMARYx)
# Get Download(Fetch)
MyDownloadsx <- EUtilsGet(SUMMARYx, type = "efetch", db = "pubmed")
#Make Data.frame of MyDownloads
abstractsx <- data.frame(title = MyDownloadsx@ArticleTitle,
abstract = MyDownloadsx@AbstractText,
journal = MyDownloadsx@Title,
DOI = MyDownloadsx@PMID,
year = MyDownloadsx@YearPubmed)
#Constract a charaterized variable for abstract of abstracts data.frame
abstractsx <- abstractsx %>% mutate(abstract = as.character(abstract))
#abstractsx$abstract <- as.character(abstractsx$abstract) # alternative for above line
return(abstractsx)
}
searchTerm="glucose"
getAbstracts("glucose")
head(getAbstracts("glucose"))
View(getAbstracts("glucose"))
attributes(getAbstracts("glucose"))
attributes(getAbstracts("glucose"))
head(abstracts)
myabstracts<-list(getAbstracts(input$searchTerm,mindate = input$dateRange[1], maxdate = input$dateRange[2], retmax = input$absFreq))
myabstracts
head(myabstracts)
head(myabstracts)
myabstractsss<-list(getAbstracts(input$searchTerm,mindate = input$dateRange[1], maxdate = input$dateRange[2], retmax = input$absFreq))
myabstractsss
head(myabstractsss)
myabstractsss<-getAbstracts(input$searchTerm,mindate = input$dateRange[1], maxdate = input$dateRange[2], retmax = input$absFreq)
getAbstracts
myabstractsss<-getAbstracts(input$searchTerm,mindate = input$dateRange[1], maxdate = input$dateRange[2], retmax = input$absFreq)
myabstractsss2<-myabstractsss[,2]
myabstractsss2
myabstractsss2<-list(getAbstracts$abstract)
myabstractsss2<-list(myabstractsss[,2])
myabstractsss2
myabstractsss<-getAbstracts(input$searchTerm,mindate = input$dateRange[1], maxdate = input$dateRange[2], retmax = input$absFreq)
myabstractsss2<-list(myabstractsss[,2])
myabstractsss3 <- lapply(myabstractsss2, grep("input$selected_word",myabstractsss2))
myabstractsss3 <- lapply(myabstractsss2, grep("insulin",myabstractsss2))
grep("insulin",myabstractsss2)
selectedabstracts<-grep("insulin",myabstractsss2)
selectedabstracts
myabstractsss2<-myabstractsss[,2]
myabstractsss2
grep("insulin",myabstractsss2)
myabstractsss3 <- lapply(myabstractsss2, grep("insulin",myabstractsss2))
grep<-grep("insulin",myabstractsss2)
grep
myabstractsss3 <- sapply(myabstractsss2, grep)
myabstractsss2<-(myabstractsss[,2])
myabstractsss2
attributes(myabstractsss2)
myabstractsss2<-list(myabstractsss[,2])
myabstractsss2
attributes(myabstractsss3)
attributes(myabstractsss2)
is.list(myabstractsss2)
filterones<- grep1("insulin",myabstractsss2)
filterones<- grep("insulin",myabstractsss2)
filterones
myabstractsss2<-(myabstractsss[,2])
myabstractsss2
myabstractsss2<-myabstractsss[2]
myabstractsss2
myabstractsss2<-list(myabstractsss[2])
myabstractsss2
myabstractsss2<-(myabstractsss[2])
is.list(myabstractsss2)
runApp('C:/Users/A   S    U    S/Desktop/shiny/maryam_shiny')
filterones<- grep("insulin",myabstractsss2)
filterones
filterones<- grep("insulin",myabstractsss2)
filterones
myabstractsss<-getAbstracts(input$searchTerm,mindate = input$dateRange[1], maxdate = input$dateRange[2], retmax = input$absFreq)
input = list(
filter = c("medical", "numbers", "stopwords", "metabolomics"),
searchTerms = "glucose",
dateRange = c(2000, 2020),
absFreq = 100,
topWords=200
)
